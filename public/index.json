[
{
	"uri": "https://detectionlab.network/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "DetectionLab is a repository containing a variety of Packer, Vagrant, Powershell, Ansible, and Terraform scripts that allow you to automate the process of bringing an ActiveDirectory environment online complete with logging and security tooling using a variety of different platforms.\nDetectionLab can currently be deployed to the following platforms:\n Virtualbox (Windows, MacOS, Linux) VMware Workstation/Fusion (Windows, MacOS, Linux) LibVirt (Not officially supported) AWS Azure ESXi  DetectionLab was built with defenders in mind. Offensive security practitioners have entire Linux distributions dedicated to streamline their work, so DetectionLab is my effort to simplify testing, analysis, research for defensive security practitioners.\nRead more about Detection Lab on Medium here: https://medium.com/@clong/introducing-detection-lab-61db34bed6ae\nPrimary Lab Features  Microsoft Advanced Threat Analytics (https://www.microsoft.com/en-us/cloud-platform/advanced-threat-analytics) is installed on the WEF machine, with the lightweight ATA gateway installed on the DC A Splunk forwarder is pre-installed and all indexes are pre-created. Technology add-ons are also preconfigured. A custom Windows auditing configuration is set via GPO to include command line process auditing and additional OS-level logging Palantir\u0026rsquo;s Windows Event Forwarding subscriptions and custom channels are implemented Powershell transcript logging is enabled. All logs are saved to \\\\wef\\pslogs osquery comes installed on each host and is pre-configured to connect to a Fleet server via TLS. Fleet is preconfigured with the configuration from Palantir\u0026rsquo;s osquery Configuration Sysmon is installed and configured using Olaf Hartong\u0026rsquo;s open-sourced Sysmon configuration All autostart items are logged to Windows Event Logs via AutorunsToWinEventLog Zeek and Suricata are pre-configured to monitor and alert on network traffic Guacamole is installed to easily access all hosts from your local browser  "
},
{
	"uri": "https://detectionlab.network/introduction/infoandcreds/",
	"title": "Lab Information and Credentials",
	"tags": [],
	"description": "",
	"content": " Domain Name: windomain.local Admininstrator login: vagrant:vagrant Fleet login: https://192.168.38.105:8412 - admin:admin123# Splunk login: https://192.168.38.105:8000 - admin:changeme MS ATA login: https://192.168.38.103 - wef\\vagrant:vagrant Guacamole login: http://192.168.38.105:8080/guacamole - vagrant:vagrant Velociraptor login: https://192.168.38.105:9999 - admin:changeme  Lab Hosts  DC - Windows 2016 Domain Controller  WEF Server Configuration GPO Powershell logging GPO Enhanced Windows Auditing policy GPO Sysmon Velociraptor osquery Splunk Universal Forwarder (Forwards Sysmon \u0026amp; osquery) Sysinternals Tools Microsft Advanced Threat Analytics Lightweight Gateway   WEF - Windows 2016 Server  Microsoft Advanced Threat Analytics Windows Event Collector Windows Event Subscription Creation Powershell transcription logging share Sysmon Velociraptor osquery Splunk Universal Forwarder (Forwards WinEventLog \u0026amp; Powershell \u0026amp; Sysmon \u0026amp; osquery) Sysinternals tools   Win10 - Windows 10 Workstation  Simulates employee workstation Sysmon Velociraptor osquery Splunk Universal Forwarder (Forwards Sysmon \u0026amp; osquery) Sysinternals Tools   Logger - Ubuntu 16.04  Splunk Enterprise Fleet osquery Manager Zeek Suricata Guacamole Velociraptor server    Splunk Indexes    Index Name Description     evtx_attack_samples Samples from https://github.com/sbousseaden/EVTX-ATTACK-SAMPLES   osquery osquery/Fleet result logs   osquery-status osquery/fleet INFO/WARN/ERROR logs   powershell Powershell transcription logs   suricata Suricata IDS logs   sysmon Logs from the Sysmon service   threathunting Used for the ThreatHunting app   wineventlog Windows Event Logs   zeek Zeek network traffic logs    Installed Tools on Windows  Sysmon Velociraptor Agent osquery AutorunsToWinEventLog Process Monitor Process Explorer PsExec TCPView Notepad++ Google Chrome WinRar Mimikatz Wireshark Powersploit Atomic Red Team BadBlood  Applied GPOs  Custom Event Channel Permissions Default Domain Controllers Policy Default Domain Policy Domain Controllers Enhanced Auditing Policy Powershell Logging Servers Enhanced Auditing Policy Windows Event Forwarding Server Workstations Enhanced Auditing Policy  "
},
{
	"uri": "https://detectionlab.network/deployment/macosvm/",
	"title": "MacOS: Virtualbox &amp; VMware",
	"tags": [],
	"description": "",
	"content": "Supported Provisioners  Virualbox A licensed copy of VMware Fusion  The VMWare Desktop Vagrant plugin is $79 and is required to use Vagrant with VMware. Install it with vagrant plugin install vagrant-vmware-desktop. License it with vagrant plugin license vagrant-vmware-desktop \u0026lt;path_to_.lic\u0026gt;. Additionally, the Vagrant VMware Utility must also be installed    If you have both Virtualbox and VMware installed, consider disabling the network adapters for the provider that you are not using. For example, if you want to build DetectionLab using Virtualbox, disable the VMware network adatpers (or vice-versa) to avoid a conflict.\n Instructions  Ensure the prerequisites listed above are installed and that you meet the system requirements Clone the DetectionLab repo to your filesystem: git clone https://github.com/clong/DetectionLab.git Using a terminal, navigate to the DetectionLab/Vagrant repository and run ./prepare.sh to verify that your system has all of the prerequisites installed:  At this point in time, we can bring up DetectionLab using the vagrant up --provider=\u0026lt;provider\u0026gt; command. The provider options are virtualbox or vmware_desktop.\nYou shouldn\u0026rsquo;t need to sudo any of the vagrant commands. Doing so can cause permission issues down the road.\n When we run Vagrant up, here\u0026rsquo;s what happens:\n Vagrant will bring up one host at a time, starting with logger and followed by dc, wef, and win10. Three boxes will be downloaded from Vagrant cloud:  bento/ubuntu18.04 detectionlab/win2016 detectionlab/win10   Each box will go through provisioning, which configures the host and installs software.  After running vagrant up --provider=vmware_desktop or vagrant up --provider=virtualbox, you should see something like this:\n$ vagrant up --provider=vmware_desktop Bringing machine \u0026#39;logger\u0026#39; up with \u0026#39;vmware_desktop\u0026#39; provider... Bringing machine \u0026#39;dc\u0026#39; up with \u0026#39;vmware_desktop\u0026#39; provider... Bringing machine \u0026#39;wef\u0026#39; up with \u0026#39;vmware_desktop\u0026#39; provider... Bringing machine \u0026#39;win10\u0026#39; up with \u0026#39;vmware_desktop\u0026#39; provider... ==\u0026gt; logger: Cloning VMware VM: \u0026#39;bento/ubuntu-18.04\u0026#39;. This can take some time... ==\u0026gt; logger: Checking if box \u0026#39;bento/ubuntu-18.04\u0026#39; version \u0026#39;202005.21.0\u0026#39; is up to date... ==\u0026gt; logger: Verifying vmnet devices are healthy... ==\u0026gt; logger: Preparing network adapters... ==\u0026gt; logger: Fixed port collision for 22 =\u0026gt; 2222. Now on port 2206. ==\u0026gt; logger: Starting the VMware VM... ==\u0026gt; logger: Waiting for the VM to receive an address... ==\u0026gt; logger: Forwarding ports... logger: -- 22 =\u0026gt; 2206 ==\u0026gt; logger: Waiting for machine to boot. This may take a few minutes... logger: SSH address: 127.0.0.1:2206 logger: SSH username: vagrant logger: SSH auth method: private key logger: Warning: Connection reset. Retrying... logger: Warning: Remote connection disconnect. Retrying... logger: logger: Vagrant insecure key detected. Vagrant will automatically replace logger: this with a newly generated keypair for better security. logger: logger: Inserting generated public key within guest... logger: Removing insecure key from the guest if it\u0026#39;s present... logger: Key inserted! Disconnecting and reconnecting using new SSH key... ==\u0026gt; logger: Machine booted and ready! ==\u0026gt; logger: Setting hostname... ==\u0026gt; logger: Configuring network adapters within the VM... ==\u0026gt; logger: Waiting for HGFS to become available... ==\u0026gt; logger: Enabling and configuring shared folders... logger: -- /DetectionLab/Vagrant: /vagrant ==\u0026gt; logger: Running provisioner: shell... logger: Running: /var/folders/7h/3s_x3_p500z48z381k82ffgh0000gn/T/vagrant-shell20200813-58692-1fm4ylc.sh logger: [05:14:29]: Adding apt repositories... logger: Get:1 http://security.ubuntu.com/ubuntu bionic-security InRelease [88.7 kB] logger: Hit:2 http://archive.ubuntu.com/ubuntu bionic InRelease ... ... If all goes well, this process should continue for 1-2 hours depending on your computer and network speed. The boxes are very large, but only need to be downloaded once.\nAfter the provisioning finishes, you can run .\\post_build_checks.sh to verify that services are running:\n[*] Verifying that Splunk is running and reachable... [✓] Fleet is running and reachable. [*] Verifying that Fleet is running and reachable... [✓] Fleet is running and reachable. [*] Verifying that Microsoft ATA is running and reachable... [✓] Microsoft ATA is running and reachable. [*] Verifying that the Velociraptor service is running and reachable... [✓] Velociraptor is running and reachable. [*] Verifying that Guacamole is running and reachable... [✓] Guacamole is running and reachable. If for some reason you encounter an error or any issues, checkout the troubleshooting page linked below. If you can\u0026rsquo;t find an answer to your question, please open an issue on the DetectionLab GitHub!\nTroubleshooting Visit the troubleshooting page.\n"
},
{
	"uri": "https://detectionlab.network/introduction/prerequisites/",
	"title": "Prerequisites",
	"tags": [],
	"description": "",
	"content": "The pre-requisities for deploying DetectionLab depend on which platform you are deploying it to.\nVirtualbox Deploy DetectionLab to your local machine as invidudial Virtualbox VMs.\n Windows, Linux, and MacOS are all supported 55GB+ of free disk space 16GB+ of RAM highly recommended Vagrant 2.2.9+ Packer 1.6.0+ (only required if building your own boxes) Virtualbox 6.0+ (older versions may work but are not tested)  VMware Fusion/Workstation Deploy DetectionLab to your local machine as invidudial VMware VMs.\n Windows, Linux, and MacOS are all supported VMware Fusion or Workstation (It must be registered, trials will not work) The VMware Desktop Vagrant Plugin (costs $79) The Vagrant VMware Utility must be installed 55GB+ of free disk space 16GB+ of RAM highly recommended Vagrant 2.2.9+ Packer 1.6.0+ (only required if building your own boxes) VMware Fusion 11+ or Workstation 15+ (older versions may work but are not tested)  AWS Deploy DetectionLab to AWS as 4 separate EC2 instances.\n AWS Account Terraform v12 awscli  Azure Deploy DetectionLab to Azure account as 4 separate instances.\n Azure Subscription ($200 free compute credit upon signup!) Terraform v12 az (Azure commandline) Ansible  ESXi Deploy DetectionLab to an ESXi server.\n ESXi 6.x  7.x is not currently supported   Packer 1.6.0+ Vagrant 2.2.9+ Ansible Terraform v12  HyperV  Windows 10 1809 or later Windows Server 2019 Windows Hyper-V Server 2019  LibVirt  libvirt virt-manager QEMU+kvm  "
},
{
	"uri": "https://detectionlab.network/deployment/",
	"title": "Deployment",
	"tags": [],
	"description": "",
	"content": "MacOS: Deploy using Virtualbox or VMware  Winows: Deploy using Virtualbox or VMware Linux: Deploy using Virtualbox or VMware AWS Deployment Azure Deployment ESXi Deployment HyperV Deployment LibVirt Deployment "
},
{
	"uri": "https://detectionlab.network/deployment/windowsvm/",
	"title": "Windows: Virtualbox &amp; VMware",
	"tags": [],
	"description": "",
	"content": "Supported Provisioners  Virualbox A licensed copy of VMware Workstation  The VMWare Desktop Vagrant plugin is $79 and is required to use Vagrant with VMware. Install it with vagrant plugin install vagrant-vmware-desktop. License it with vagrant plugin license vagrant-vmware-desktop \u0026lt;path_to_.lic\u0026gt;. Additionally, the Vagrant VMware Utility must also be installed    If you have both Virtualbox and VMware installed, consider disabling the network adapters for the provider that you are not using. For example, if you want to build DetectionLab using Virtualbox, disable the VMware network adatpers (or vice-versa) to avoid a conflict.  Instructions  Ensure the prerequisites listed above are installed and that you meet the system requirements Clone the DetectionLab repo to your filesystem: git clone https://github.com/clong/DetectionLab.git Using a terminal, navigate to the DetectionLab/Vagrant repository and run .\\prepare.ps1 to verify that your system has all of the prerequisites installed:  At this point in time, we can bring up DetectionLab using the vagrant up --provider=\u0026lt;provider\u0026gt; command. The provider options are virtualbox or vmware_desktop.\nWhen we run Vagrant up, here\u0026rsquo;s what happens:\n Vagrant will bring up one host at a time, starting with logger and followed by dc, wef, and win10. Three boxes will be downloaded from Vagrant cloud:  bento/ubuntu18.04 detectionlab/win2016 detectionlab/win10   Each box will go through provisioning, which configures the host and installs software.  After running vagrant up --provider=vmware_desktop or vagrant up --provider=virtualbox, you should see something like this:\nPS C:\\Users\\build\\DetectionLab\\Vagrant\u0026gt; vagrant up --provider=virtualbox Bringing machine \u0026#39;logger\u0026#39; up with \u0026#39;virtualbox\u0026#39; provider... Bringing machine \u0026#39;dc\u0026#39; up with \u0026#39;virtualbox\u0026#39; provider... Bringing machine \u0026#39;wef\u0026#39; up with \u0026#39;virtualbox\u0026#39; provider... Bringing machine \u0026#39;win10\u0026#39; up with \u0026#39;virtualbox\u0026#39; provider... ==\u0026gt; logger: Importing base box \u0026#39;bento/ubuntu-18.04\u0026#39;... ==\u0026gt; logger: Matching MAC address for NAT networking... ==\u0026gt; logger: Checking if box \u0026#39;bento/ubuntu-18.04\u0026#39; version \u0026#39;202007.17.0\u0026#39; is up to date... ==\u0026gt; logger: Setting the name of the VM: logger ==\u0026gt; logger: Clearing any previously set network interfaces... ==\u0026gt; logger: Preparing network interfaces based on configuration... logger: Adapter 1: nat logger: Adapter 2: hostonly ==\u0026gt; logger: Forwarding ports... logger: 22 (guest) =\u0026gt; 2222 (host) (adapter 1) ==\u0026gt; logger: Running \u0026#39;pre-boot\u0026#39; VM customizations... ==\u0026gt; logger: Booting VM... ==\u0026gt; logger: Waiting for machine to boot. This may take a few minutes... logger: SSH address: 127.0.0.1:2222 logger: SSH username: vagrant logger: SSH auth method: private key logger: logger: Vagrant insecure key detected. Vagrant will automatically replace logger: this with a newly generated keypair for better security. logger: logger: Inserting generated public key within guest... logger: Removing insecure key from the guest if it\u0026#39;s present... logger: Key inserted! Disconnecting and reconnecting using new SSH key... ==\u0026gt; logger: Machine booted and ready! ==\u0026gt; logger: Checking for guest additions in VM... ==\u0026gt; logger: Setting hostname... ==\u0026gt; logger: Configuring and enabling network interfaces... ==\u0026gt; logger: Mounting shared folders... logger: /vagrant =\u0026gt; C:/Users/user/DetectionLab/Vagrant ==\u0026gt; logger: Running provisioner: shell... logger: Running: C:/Users/build/AppData/Local/Temp/vagrant-shell20200813-3372-yqjhma.sh logger: [05:34:56]: Adding apt repositories... logger: Get:1 http://security.ubuntu.com/ubuntu bionic-security InRelease [88.7 kB] logger: Hit:2 http://archive.ubuntu.com/ubuntu bionic InRelease ... ... If all goes well, this process should continue for 1-2 hours depending on your computer and network speed. The boxes are very large, but only need to be downloaded once.\nOnce provisoning is finished, you can access the VMs through the GUI or SSH/RDP to them directly. You can also verify services are accessible by running .\\post_build_checks.ps1:\nIf for some reason you encounter an error or any issues, checkout the troubleshooting page linked below. If you can\u0026rsquo;t find an answer to your question, please open an issue on the DetectionLab GitHub!\nTroubleshooting Visit the troubleshooting page.\n"
},
{
	"uri": "https://detectionlab.network/introduction/packerandvagrant/",
	"title": "Understanding Packer &amp; Vagrant",
	"tags": [],
	"description": "",
	"content": "To better understand the technology behind this project, it\u0026rsquo;s important to understand the role that Packer and Vagrant have.\nA good way to think about this is to consider what would be required to build a lab like this without any automation. The steps would look something like this:\n Obtain ISOs for Ubuntu, Windows Server 2016, and Windows 10 Using Virtualbox or VMware, install the operating systems onto the VMs Once the operating systems have been installed, tailor a few operating settings to your liking Take a snapshot of each VM once you\u0026rsquo;ve tweaked the settings Now that a snapshot has been created, begin installing software on each VM. In the case of Detection Lab, this includes Splunk, Active Directory Domain Services, Windows Event Forwarding, and much more. Join each host to the domain and ensure networking is correctly configured.  Obviously this process is extremely time consuming and tedious to repeat. Packer and Vagrant help automate the steps of this process.\nPacker At a high level, Packer is responsible for taking an operating system ISO and JSON configuration file as input, and generating a \u0026ldquo;Box\u0026rdquo; as output. This \u0026ldquo;Box\u0026rdquo; is essentially a compressed version of a Virtual Machine. Packer allows you to automate the installation of the operating system and can make configuration changes to the operating system as well.\nWith DetectionLab, the boxes are pre-built and hosted on vagrantcloud.com. There is no requirement for you to create these boxes unless you\u0026rsquo;d like to customize or change them.\nVagrant The simplest way to think about Vagrant is to think of it as a command line client for Virtualbox and VMware. In the same way that Docker uses Dockerfiles, Vagrant uses Vagrantfiles. Vagrantfiles contain information about virtual machines, such as which operating system to use, the CPU/memory specifications, networking options, and also any scripts or commands that the VM should execute.\nIn the same way that you can use Docker to pull down containers, you can use Vagrant to pull down entire VMs.\nVagrant Once Packer has completed creating a Box, Vagrant is able to use it to further provision (or install software) on the operating system. In the case of Detection Lab, this means installing Splunk, Active Directory, Windows Event Forwarding, Security Tooling, and much more.\n"
},
{
	"uri": "https://detectionlab.network/usage/",
	"title": "Usage",
	"tags": [],
	"description": "",
	"content": "todo\n"
},
{
	"uri": "https://detectionlab.network/introduction/basicvagrant/",
	"title": "Basic Vagrant Usage",
	"tags": [],
	"description": "",
	"content": "It\u0026rsquo;s easiest to think of Vagrant as a command-line wrapper for interacting with Virtualbox and VMware.\nWhen running Vagrant commands, you must be in a directory containing a Vagrantfile or you will receive the following error: A Vagrant environment or target machine is required to run this command.\n Setting a default provider If you happen to have both Virtualbox and VMware Workstation/Fusion installed, it may be helpful to set the VAGRANT_DEFAULT_PROVIDER environment variable to either vmware_desktop or virtualbox.\nBasic Vagrant Usage All commands must be run from the \u0026ldquo;DetectionLab/Vagrant\u0026rdquo; folder\n Bring up all Detection Lab hosts using Virtualbox: vagrant up \u0026ndash;provider=virtualbox Bring up all Detection Lab hosts using VMware: vagrant up \u0026ndash;provider=vmware_desktop Bring up a specific host: vagrant up \u0026lt;hostname\u0026gt; Restart a specific host: vagrant reload \u0026lt;hostname\u0026gt; Restart a specific host and re-run the provision process: vagrant reload \u0026lt;hostname\u0026gt; \u0026ndash;provision Destroy a specific host: vagrant destroy \u0026lt;hostname\u0026gt; Destroy the entire Detection Lab environment: vagrant destroy (Adding -f forces it without a prompt) SSH into a host (only works with Logger): vagrant ssh logger Run a WinRM command on a host (only works with DC, WEF, and WIN10): vagrant winrm \u0026ndash;command hostname \u0026ndash;shell powershell \u0026lt;hostname\u0026gt; Check the status of each host: vagrant status Suspend the lab environment: vagrant suspend Resume the lab environment: vagrant resume Shutdown each host: vagrant halt  Feel free to test it out! Navigate to DetectionLab/Vagrant and run vagrant status. If this is a fresh repo, you should see:\n$ vagrant status Current machine states: logger not created (vmware_desktop) dc not created (vmware_desktop) wef not created (vmware_desktop) win10 not created (vmware_desktop) This environment represents multiple VMs. The VMs are all listed above with their current state. For more information about a specific VM, run `vagrant status NAME`. "
},
{
	"uri": "https://detectionlab.network/deployment/linuxvm/",
	"title": "Linux: Virtualbox &amp; VMware",
	"tags": [],
	"description": "",
	"content": "Supported Provisioners  Virualbox A licensed copy of VMware Fusion  The VMWare Desktop Vagrant plugin is $79 and is required to use Vagrant with VMware. Install it with vagrant plugin install vagrant-vmware-desktop. License it with vagrant plugin license vagrant-vmware-desktop \u0026lt;path_to_.lic\u0026gt;. Additionally, the Vagrant VMware Utility must also be installed    If you have both Virtualbox and VMware installed, consider disabling the network adapters for the provider that you are not using. For example, if you want to build DetectionLab using Virtualbox, disable the VMware network adatpers (or vice-versa) to avoid a conflict.\n Instructions  Ensure the prerequisites listed above are installed and that you meet the system requirements Clone the DetectionLab repo to your filesystem: git clone https://github.com/clong/DetectionLab.git Using a terminal, navigate to the DetectionLab/Vagrant repository and run ./prepare.sh to verify that your system has all of the prerequisites installed:  At this point in time, we can bring up DetectionLab using the vagrant up --provider=\u0026lt;provider\u0026gt; command. The provider options are virtualbox or vmware_desktop.\nYou shouldn\u0026rsquo;t need to sudo any of the vagrant commands. Doing so can cause permission issues down the road.\n When we run Vagrant up, here\u0026rsquo;s what happens:\n Vagrant will bring up one host at a time, starting with logger and followed by dc, wef, and win10. Three boxes will be downloaded from Vagrant cloud:  bento/ubuntu18.04 detectionlab/win2016 detectionlab/win10   Each box will go through provisioning, which configures the host and installs software.  After running vagrant up --provider=vmware_desktop or vagrant up --provider=virtualbox, you should see something like this:\n$ vagrant up --provider=vmware_desktop Bringing machine \u0026#39;logger\u0026#39; up with \u0026#39;vmware_desktop\u0026#39; provider... Bringing machine \u0026#39;dc\u0026#39; up with \u0026#39;vmware_desktop\u0026#39; provider... Bringing machine \u0026#39;wef\u0026#39; up with \u0026#39;vmware_desktop\u0026#39; provider... Bringing machine \u0026#39;win10\u0026#39; up with \u0026#39;vmware_desktop\u0026#39; provider... ==\u0026gt; logger: Cloning VMware VM: \u0026#39;bento/ubuntu-18.04\u0026#39;. This can take some time... ==\u0026gt; logger: Checking if box \u0026#39;bento/ubuntu-18.04\u0026#39; version \u0026#39;202005.21.0\u0026#39; is up to date... ==\u0026gt; logger: Verifying vmnet devices are healthy... ==\u0026gt; logger: Preparing network adapters... ==\u0026gt; logger: Fixed port collision for 22 =\u0026gt; 2222. Now on port 2206. ==\u0026gt; logger: Starting the VMware VM... ==\u0026gt; logger: Waiting for the VM to receive an address... ==\u0026gt; logger: Forwarding ports... logger: -- 22 =\u0026gt; 2206 ==\u0026gt; logger: Waiting for machine to boot. This may take a few minutes... logger: SSH address: 127.0.0.1:2206 logger: SSH username: vagrant logger: SSH auth method: private key logger: Warning: Connection reset. Retrying... logger: Warning: Remote connection disconnect. Retrying... logger: logger: Vagrant insecure key detected. Vagrant will automatically replace logger: this with a newly generated keypair for better security. logger: logger: Inserting generated public key within guest... logger: Removing insecure key from the guest if it\u0026#39;s present... logger: Key inserted! Disconnecting and reconnecting using new SSH key... ==\u0026gt; logger: Machine booted and ready! ==\u0026gt; logger: Setting hostname... ==\u0026gt; logger: Configuring network adapters within the VM... ==\u0026gt; logger: Waiting for HGFS to become available... ==\u0026gt; logger: Enabling and configuring shared folders... logger: -- /DetectionLab/Vagrant: /vagrant ==\u0026gt; logger: Running provisioner: shell... logger: Running: /var/folders/7h/3s_x3_p500z48z381k82ffgh0000gn/T/vagrant-shell20200813-58692-1fm4ylc.sh logger: [05:14:29]: Adding apt repositories... logger: Get:1 http://security.ubuntu.com/ubuntu bionic-security InRelease [88.7 kB] logger: Hit:2 http://archive.ubuntu.com/ubuntu bionic InRelease ... ... If all goes well, this process should continue for 1-2 hours depending on your computer and network speed. The boxes are very large, but only need to be downloaded once.\n[*] Verifying that Splunk is running and reachable... [✓] Fleet is running and reachable. [*] Verifying that Fleet is running and reachable... [✓] Fleet is running and reachable. [*] Verifying that Microsoft ATA is running and reachable... [✓] Microsoft ATA is running and reachable. [*] Verifying that the Velociraptor service is running and reachable... [✓] Velociraptor is running and reachable. [*] Verifying that Guacamole is running and reachable... [✓] Guacamole is running and reachable. If for some reason you encounter an error or any issues, checkout the troubleshooting page linked below. If you can\u0026rsquo;t find an answer to your question, please open an issue on the DetectionLab GitHub!\nTroubleshooting Visit the troubleshooting page.\n"
},
{
	"uri": "https://detectionlab.network/customization/",
	"title": "Customization",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://detectionlab.network/deployment/aws/",
	"title": "AWS",
	"tags": [],
	"description": "",
	"content": "Prerequisites  Terraform An AWS account An IAM user and role for Terraform  An AWS keypair for that user   AWS CLI  Deployment Expected time to completion: 25 minutes\nBy building DetectionLab in AWS, we can take advantage of the pre-built Windows AMIs that have already been completely provisioned. Here is what happens when terraform apply is called:\n A VPC is created A subnet is created An internet gateway is created to give our subnet access to the outside world A security group is created to allow inbound traffic from whitelisted IP addresses. These IP addresses are configured in the terraform.tfvars file you create in step 4 below. The logger host is fully provisioned from an Ubuntu base AMI. The Windows host are pre-provisioned and are spun up from an AMI. No provisioning is necessary. Instances can then be accessed via RDP, SSH, and via your browser.  Please remember that keeping your instances online for long periods of time will rack up your AWS bill. Don\u0026rsquo;t forget to terraform destroy your instances once you\u0026rsquo;re done using it!\n Deployment Instructions  Clone the DetectionLab repo to your filesystem: git clone https://github.com/clong/DetectionLab.git In your AWS console, create and apply this policy to the IAM user whose keypair you will be using for terraform. This policy has been tailored to only use the required permissions needed for DetectionLab. Configure the AWS command line utility and set up a profile for Terraform via aws configure --profile terraform. Create a private/public keypair to use to SSH into logger: ssh-keygen -b 2048 -f ~/.ssh/id_logger Copy the file at DetectionLab/AWS/Terraform/terraform.tfvars.example to /DetectionLab/AWS/Terraform/terraform.tfvars In terraform.tfvars (the file you just copied), provide overrides for the variables specified in variables.tf. AMIs are currently only available in us-west-1 and us-east-1 due to storage costs. If you\u0026rsquo;d like to bring up DetectionLab in another region, please view deploying DetectionLab in a different AWS region.\n Failing to complete this step will cause the lab to be unreachable.\n  From the DetectionLab/AWS/Terraform directory, run terraform init to setup the initial Terraform configuration Run terraform apply to begin the provisioning process  Quickstart Video A sample video of the setup process can be viewed here: \nBuilding your own AMIs For more information about creating your own AMIs (as opposed to using the pre-built ones), please read this wiki page: Terraform: Building Your Own AMIs\n"
},
{
	"uri": "https://detectionlab.network/customization/buildami/",
	"title": "AWS: Building your own AMIs",
	"tags": [],
	"description": "",
	"content": "This method involves using Terraform to bring DetectionLab infrastructure online by first building it locally using Virtualbox/VMware and then importing the resulting virtual machines as AMIs on AWS.\nThe supplied Terraform configuration can then be used to create EC2 instances and all requisite networking components.\nPrerequisites  A machine to build DetectionLab with An AWS account An AWS user and access keys to use with the AWS CLI Optional but recommended: a separate user for Terraform  Step by step guide   Build the lab by following the README\n  Configure the AWS command line utility\n  Create an S3 bucket. You will upload the DetectionLab VMs to this bucket later.\n  For the VM importation to work, you must create a role named vmimport with a trust relationship policy document that allows VM Import to assume the role, and you must attach an IAM policy to the role:\n  aws iam create-role --role-name vmimport --assume-role-policy-document file:///path/to/DetectionLab/Terraform/vm_import/trust-policy.json\n Edit /path/to/DetectionLab/Terraform/vm_import/role-policy.json and insert the name of the bucket you created in step 3 on lines 12-13, replacing YOUR_BUCKET_GOES_HERE with the name of your bucket.\n  Use the create-role command to create a role named vmimport and give VM Import/Export access to it:\n  aws iam put-role-policy --role-name vmimport --policy-name vmimport --policy-document file:///path/to/DetectionLab/Terraform/vm_import/role-policy.json\nExport the DetectionLab VMs as single file OVA files if they are not already in that format Upload the OVAs to the S3 bucket you created in step three Edit the dc.json, wef.json and win10.json files and modify the S3Bucket and S3Key headers to match the location of the OVA files in your S3 bucket. Import the VMs from S3 as AMIs by running the following commands:  aws ec2 import-image --description \u0026quot;dc\u0026quot; --license-type byol --disk-containers file:///path/to/DetectionLab/Terraform/vm_import/dc.json aws ec2 import-image --description \u0026quot;wef\u0026quot; --license-type byol --disk-containers file:///path/to/DetectionLab/Terraform/vm_import/wef.json aws ec2 import-image --description \u0026quot;win10\u0026quot; --license-type byol --disk-containers file:///path/to/DetectionLab/Terraform/vm_import/win10.json Check on the status of the importation with the following command:  aws ec2 describe-import-image-tasks --import-task-ids \u0026lt;import-ami-xxxxxxxxxxxxxxxxx\u0026gt;\nCopy the file at /DetectionLab/Terraform/terraform.tfvars.example to /DetectionLab/Terraform/terraform.tfvars Fill out the variables in /DetectionLab/Terraform/terraform.tfvars Run terraform init to setup the initial Terraform configuration cd to DetectionLab/Terraform and run terraform apply  "
},
{
	"uri": "https://detectionlab.network/customization/buildpackerboxes/",
	"title": "Building Your Own Packer Boxes",
	"tags": [],
	"description": "",
	"content": "If you find yourself wanting to customize the Packer boxes or don\u0026rsquo;t trust running VMs downloaded from VagrantCloud, you have the ability to build them from scratch.\nBy using this method, you will be building the Vagrant boxes yourself using Packer. This method will take ~1 hour to build the boxes and another ~90-120 minutes to provision them for a total of 2-3 hours.\nSteps  cd to the DetectionLab/Packer directory and build the Windows 10 and Windows Server 2016 boxes using the commands below. Each build will take about 1 hour. You can run these commands in parallel in separate terminal windows:  $ cd DetectionLab/Packer $ packer build --only=[vmware|virtualbox]-iso windows_10.json $ packer build --only=[vmware|virtualbox]-iso windows_2016.json   Once both boxes have built successfully, move the resulting boxes (.box files) from the Packer folder to the Boxes folder:\ncd DetectionLab/Packer \u0026amp;\u0026amp; mv *.box ../Boxes\n  cd into the DetectionLab/Vagrant directory and edit Vagrantfile. Change the lines\n  cfg.vm.box = \u0026quot;detectionlab/win2016\u0026quot;\ncfg.vm.box = \u0026quot;detectionlab/win10\nto\ncfg.vm.box = \u0026quot;../Boxes/windows_2016_\u0026lt;provider\u0026gt;.box\u0026quot;\ncfg.vm.box = \u0026quot;../Boxes/windows_10_\u0026lt;provider\u0026gt;.box\u0026quot;\nrespectively.\n\u0026lt;provider\u0026gt; should be either \u0026ldquo;virtualbox\u0026rdquo; or \u0026ldquo;vmware\u0026rdquo;.\nNow when you run vagrant up, vagrant will use these locally created boxes instead of downloading them from VagrantCloud.\n"
},
{
	"uri": "https://detectionlab.network/introduction/continuousintegration/",
	"title": "Continuous Integration",
	"tags": [],
	"description": "",
	"content": "DetectionLab is built on Ubuntu 18.04 every Saturday at Midnight UTC time using the Virtualbox provider. Results of the builds can be viewed here: https://app.circleci.com/pipelines/github/clong/DetectionLab?branch=master\nThe CI build process is shown in the image below:\nFor more context around this, please see Continuous Integration for DetectionLab\n"
},
{
	"uri": "https://detectionlab.network/customization/differentawsregion/",
	"title": "Deploying DetectionLab in a Different AWS Region",
	"tags": [],
	"description": "",
	"content": "For cost reasons, DetectionLab AMIs are only currently hosted in us-west-1 and us-east-1. Each region I host AMIs in increases my monthly AWS bill. However, you are welcome to copy those public AMIs into your AWS account in any region you\u0026rsquo;d like. Here\u0026rsquo;s how:\nVia the AWS Console  Log into AWS and select the EC2 service Click \u0026ldquo;AMIs\u0026rdquo; on the left hand column and ensure you are currently either in us-west-1 or us-east-1 Change the filter from \u0026ldquo;Owned by me\u0026rdquo; to \u0026ldquo;Public Images\u0026rdquo; Add the following filter: \u0026ldquo;Owner : 505638924199\u0026rdquo;  You should see 3 AMIs appear: detectionlab-dc, detectionlab-wef, detectionlab-win10 For each AMI (you have to do this one at a time), click on the box next to the AMI \u0026gt; Actions \u0026gt; Copy AMI. From here, you will be able to select which region to copy the AMI to. Do this for all three AMIs.  Switch to the target region you chose in step 6 and visit the AMIs panel. You should see 3 pending AMI transfers.  Edit Terraform/variables.tfvars and change the dc_ami, wef_ami, and win10_ami default values from empty string (\u0026quot;\u0026quot;) to the AMI ID shown in your AWS console.  "
},
{
	"uri": "https://detectionlab.network/customization/bots/",
	"title": "Installing the Boss of the SOC (BOTS) Datasets",
	"tags": [],
	"description": "",
	"content": "DetectionLab includes scripts to install the Splunk BOTSv2 and BOTSv3 datasets and all of their recommended apps.\nInstallation From the logger host, simply run:\nBOTSv2: chmod +x /vagrant/scripts/install-botsv2.sh \u0026amp;\u0026amp; /vagrant/scripts/install-botsv2.sh\nBOTSv3: chmod +x /vagrant/scripts/install-botsv3.sh \u0026amp;\u0026amp; /vagrant/scripts/install-botsv3.sh\nIf for some reason those files aren\u0026rsquo;t available, you can access them directly in Github:\n install-botsv2.sh install-botsv3.sh  Once installed, you can query the data in Splunk with: index=botsv3 earliest=0\nI recommend bumping the RAM on logger to 8GB+ if you can. Life gets really bad when logger uses all of its 4GB of memory and starts paging to disk  Further Reading Read more about the BOTSv2 and BOTSv3 datasets here: https://github.com/splunk/securitydatasets\nA walkthrough of BOTSv3 is also available here: https://clo.ng/blog/bots-part1/\n"
},
{
	"uri": "https://detectionlab.network/customization/badblood/",
	"title": "Use BadBlood to Add Random Users and Groups to Active Directory",
	"tags": [],
	"description": "",
	"content": "DetectionLab comes pre-loaded with a bunch of tools, one of which is called BadBlood\nIf you\u0026rsquo;d like to populate active directory with a bunch of randomized users and groups, simply do the following:\n Open a Powershell console with Administrator rights on the DC host, then run:  cd c:\\Tools\\BadBlood\\BadBlood-master .\\Invoke-BadBlood.ps1 It will prompt you for confirmation, then begin adding hundreds of random users and groups.\n"
},
{
	"uri": "https://detectionlab.network/deployment/azure/",
	"title": "Azure",
	"tags": [],
	"description": "",
	"content": "Prerequisites (~30-60 minutes) Have an active Azure account. If you don\u0026rsquo;t have one yet, they give you $200 worth of credit to use within the first 30 days! Install Terraform and move it to a directory included in your system\u0026rsquo;s PATH. Install Ansible. This will be used to provision the instances. Some users may prefer to install Ansible inside of a virtual environment; that\u0026rsquo;s fine too. Install the Azure command line client and make sure it\u0026rsquo;s included in your system\u0026rsquo;s PATH. Either create or re-use an existing SSH keypair that you\u0026rsquo;ll use to authenticate to the logger host Make sure you\u0026rsquo;ve pulled down the most recent changes from the DetectionLab git repo Please note that the default credentials before provisioning are vagrant:Vagrant123 due to the windows SKU/AMI password complexity requirements!  Steps Terraform   (5 Minutes) - Configure the terraform.tfvars file\n Copy the file at DetectionLab/Azure/Terraform/terraform.tfvars.example to DetectionLab/Azure/Terraform/terraform.tfvars In the newly copied terraform.tfvars, provide a value for each variable. Failing to complete this step will cause the lab to be unreachable.\n     (5 Minutes) - Authenticate to Azure using az\n Run az login. This should bring up a browser that asks you to sign into your Azure account. Sign in and the window should say \u0026ldquo;You have logged into Microsoft Azure!\u0026rdquo;    (3-20 Minutes) - Bring up the VM\u0026rsquo;s using Terraform\n cd to Azure/Terraform and run terraform init to initialize the working directory Make sure you followed the pre-reqs and have a terraform.tfvars file present with your public IP address whitelisted Run terraform apply to check the Terraform plan or terraform apply --auto-approve to bypass the check It will take ~20 minutes for logger to come online and finish provisioning, but you can move onto the next step once you see that DC, WEF, and WIN10 have fininshed creation (usually around 2 minutes):  azurerm_virtual_machine.dc: Creation complete after 1m55s azurerm_virtual_machine.wef: Creation complete after 1m54s azurerm_virtual_machine.win10: Creation complete after 1m55s   At this point in time, we\u0026rsquo;re at this state:\n Logger VM has been brought up and is provisioning DC VM has been brought up but is unprovisioned WEF VM has been brought up but is unprovisioned WIN10 VM has been brought up but is unprovisioned  At this point in time, you should be able to open a new terminal window, navigate to DetectionLab/Azure/Terraform and run terraform output. You should see something like the following:\nata_url = https://52.191.136.x dc_public_ip = 52.183.119.x fleet_url = https://52.191.170.x:8412 guacamole_url = https://52.191.136.x:8080/guacamole logger_public_ip = 52.191.170.x region = West US 2 splunk_url = https://52.191.170.x:8000 wef_public_ip = 52.191.136.x win10_public_ip = 52.229.34.x We\u0026rsquo;re going to use this output in the next step.\n Ansible We\u0026rsquo;re going to use Ansible to fininsh provisioning the rest of the Windows hosts.\n (5 Minutes) - Configure the inventory.yml file  Navigate to Azure/Ansible and open inventory.yml for editing. Take the public_ip values from terraform output and replace the x.x.x.x values with the public IP of each host NOTE: I\u0026rsquo;ve added a script at DetectionLab/Azure/build_ansible_inventory.sh to help automate this for MacOS and Linux users.\n     Now that Ansible is configured for provisioning, there are two ways to go about this:\n Provision each host one at a time (e.g. DC, then WEF, then WIN10). This is slower, but requires less steps. Provision the DC, then provision WEF and WIN10 simultaneously. This is faster, but you\u0026rsquo;ll have to open multiple terminals and do a bit of manual work.  For the provisioning to be successful, the DC has to spin up Active Directory before provisioning of the WEF and WIN10 hosts can begin, otherwise they will fail to join the domain and provisioning will fail.\nSlow but steady If you\u0026rsquo;d like to take the slower but easier route, ensure you\u0026rsquo;re in the DetectionLab/Azure/Ansible directory and run ansible-playbook -v detectionlab.yml. This will provision the hosts one at a time (DC, WEF, then WIN10). However, if you\u0026rsquo;d like to go the faster route, follow the directions below.\nFaster, but more hands-on If you\u0026rsquo;d like to take the faster route, I recommend opening 3 terminal windows to DetectionLab/Azure/Ansible and following these steps:\n In the first window, run ansible-playbook -v detectionlab.yml --tags \u0026quot;dc\u0026quot; Once the DC has passed the Reboot Afer Domain Creation Ansible step, you can begin provisioning WEF and WIN10 In the second window, run ansible-playbook -v detectionlab.yml --tags \u0026quot;wef\u0026quot; In the third window, run ansible-playbook -v detectionlab.yml --tags \u0026quot;win10\u0026quot;  If you run into any issues along the way, please open an issue on Github and I\u0026rsquo;ll do my best to find a solution.\nDebugging / Troubleshooting / Known Issues  If an Ansible playbook fails (and they sometimes do), you can pick up where it left off with ansible-playbook -vvv detectionlab.yml --tags=\u0026quot;hostname-goes-here\u0026quot; --start-at-task=\u0026quot;taskname\u0026quot; \u0026ldquo;Installing Red Team Tooling\u0026rdquo; hangs if AV isn\u0026rsquo;t disabled successfully  Future work required  I imagine there\u0026rsquo;s a streamlined way to get the results of terraform output into the inventory.yml for Ansible. I\u0026rsquo;m guessing there\u0026rsquo;s a way to parallelize some of this execution or make some of it asynchronous: https://medium.com/developer-space/parallel-playbook-execution-in-ansible-30799ccda4e0 and https://docs.ansible.com/ansible/latest/user_guide/playbooks_async.html  Credits As usual, this work is based off the heavy lifting that others have done. My primary sources for this work were:\n The DetectionLab work that juju4 has been doing on Azure and Ansible. At least 90% of this code was borrowed from their work. Automate Windows VM Creation and Configuration in vSphere Using Packer, Terraform and Ansible - Dmitry Teslya  Thank you to all of the sponsors who made this possible!\n"
},
{
	"uri": "https://detectionlab.network/deployment/esxi/",
	"title": "ESXi",
	"tags": [],
	"description": "",
	"content": "An additional step-by-step guide can be found here which also details the ESXi installation process: https://clo.ng/blog/detectionlab-on-esxi/\nPrereqs (~30-60 minutes)  Have an ESXi instance version 6 or higher. VSphere is NOT required. Terraform version 0.13 or higher is required as it provides support for installing Terraform providers directly from the Terraform Registry. The ESXi Terraform Provider built by https://github.com/josenk/terraform-provider-esxi is required, but will be installed automatically during a later step. Your ESXi instance must have at least two separate networks - one that is accessible from your current machine and has internet connectivity and a HostOnly network to allow the VMs to communicate over a private network. The network that provides DHCP and internet connectivity must also be reachable from the host that is running Terraform - ensure your firewall is configured to allow this. OVFTool must be installed and in your path.  On MacOS, I solved this by creating a symbolic link to the ovftool included in VMWare Fusion: sudo ln -s \u0026quot;/Applications/VMware Fusion.app/Contents/Library/VMware OVF Tool/ovftool\u0026quot; \u0026quot;/usr/local/bin/ovftool\u0026quot; Downloads for OVFTool are also here: https://code.vmware.com/web/tool/4.4.0/ovf   On your ESXi instance, you must:  Enable SSH Enable the \u0026ldquo;Guest IP Hack\u0026rdquo; Open VNC ports on the firewall (not reqired for ESXi 7.0+)   Instructions for those steps are here: https://nickcharlton.net/posts/using-packer-esxi-6.html Alternatively, you can install the VIB file from https://github.com/sukster/ESXi-Packer-VNC which will automatically open the VNC ports on the ESXi firewall.   Install Ansible and pywinrm via pip3 install ansible pywinrm --user or by creating and using a virtual environment. Packer v1.6.3+ must be installed and in your PATH sshpass must be installed to allow Ansible to use password login. On MacOS, install via brew install hudochenkov/sshpass/sshpass as brew install sshpass does not allow it to be installed.  Steps  (5 Minutes) Edit the variables in DetectionLab/ESXi/Packer/variables.json to match your ESXi configuration. The esxi_network_with_dhcp_and_internet variable refers to any ESXi network that will be able to provide DHCP and internet access to the VM while it\u0026rsquo;s being built in Packer. This is usually VM Network. Note: As of ESXI 7.x, the built-in VNC server has been removed. If you are using ESXI 7.x, we\u0026rsquo;ll need to use the vnc_over_websocket directive.  Configuration for ESXi 7.x To do this, add the following two directives as the top items under the builders array\n \u0026ldquo;vnc_over_websocket\u0026rdquo;: true, \u0026ldquo;insecure_connection\u0026rdquo;: true,  { \u0026quot;builders\u0026quot;: [ { \u0026quot;vnc_over_websocket\u0026quot;: true, \u0026quot;insecure_connection\u0026quot;: true, \u0026quot;vnc_disable_password\u0026quot;: true, \u0026quot;keep_registered\u0026quot;: true, ... to the following files:\n DetectionLab/ESXi/Packer/windows_10_esxi.json DetectionLab/ESXi/Packer/windows_2016_esxi.json DetectionLab/ESXi/Packer/ubuntu1804_esxi.json  The remaining steps apply to both both ESXi 6.x and 7.x:\n(45 Minutes) From the DetectionLab/ESXi/Packer directory, run:   PACKER_CACHE_DIR=../../Packer/packer_cache packer build -var-file variables.json windows_10_esxi.json PACKER_CACHE_DIR=../../Packer/packer_cache packer build -var-file variables.json windows_2016_esxi.json PACKER_CACHE_DIR=../../Packer/packer_cache packer build -var-file variables.json ubuntu1804_esxi.json  These commands can be run in parallel from three separate terminal sessions.\n (1 Minute) Once the Packer builds finish, verify that you now see Windows10, WindowsServer2016, and Ubuntu1804 in your ESXi console   (5 Minutes) In DetectionLab/ESXi, Create a terraform.tfvars file (RECOMMENDED) to override the default variables listed in variables.tf.   (25 Minutes) From DetectionLab/ESXi, run terraform init. The ESXi Terraform provider should install automatically during this step:\n  $ terraform init Initializing the backend... Initializing provider plugins... - Finding josenk/esxi versions matching \u0026quot;1.8.0\u0026quot;... - Installing josenk/esxi v1.8.0... - Installed josenk/esxi v1.8.0 (self-signed, key ID A3C2BB2C490C3920) Partner and community providers are signed by their developers. If you'd like to know more about provider signing, you can read about it here: https://www.terraform.io/docs/plugins/signing.html Terraform has been successfully initialized! Running terraform apply should then prompt us to create the logger, dc, wef, and win10 instances:  $ terraform apply \u0026lt;snip\u0026gt; Plan: 4 to add, 0 to change, 0 to destroy. Do you want to perform these actions? Terraform will perform the actions described above. Only 'yes' will be accepted to approve.  If an ESXi server is managed by a vCenter, terraform will fail with: Access to resource settings on the host is restricted to the server that is managing it: xx.xx.xx. To allow terraform to work, a user can SSH into the ESXi server and run: /etc/init.d/vpxa stop; /etc/init.d/hostd restart This will disconnect the host from the vCenter. Once the terrafrom is complete, run /etc/init.d/vpxa start to reconnect with the vCenter server.\n Once finished, you should see something like the following: Once Terraform has finished bringing the hosts online, change your directory to DetectionLab/ESXi/Ansible (1 Minute) Edit DetectionLab/ESXi/Ansible/inventory.yml and replace the IP Addresses with the respective IP Addresses of your ESXi VMs. At times, the Terraform output is unable to derive the IP address of hosts, so you may have to log into the ESXi console to find that information and then enter the IP addresses into inventory.yml  (3 Minute) Before running any Ansible playbooks, I highly recommend taking snapshots of all your VMs! If anything goes wrong with provisioning, you can simply restore the snapshot and easily debug the issue. (30 Minutes) Run ansible-playbook -v detectionlab.yml. This will provision the hosts one by one using Ansible. If you’d like to provision each host individually in parallel, you can use ansible-playbook -v detectionlab.yml \u0026ndash;tags \u0026ldquo;[logger|dc|wef|win10]\u0026rdquo; and run each in a separate terminal tab. If running Ansible causes a fork() related error message, set the following environment variable before running Ansible: export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES. More about this here..\n  If all goes well, you should see the following and your lab is complete!   If you run into any issues along the way, please open an issue on Github and I\u0026rsquo;ll do my best to find a solution.\nConfiguring Windows 10 with WSL as a Provisioning Host Note: Run the following commands as a root user or with sudo\n In Windows 10 install WSL (version 1 or 2) Install Ubuntu 18.04 app from the Microsoft Store Update repositories and upgrade the distro: apt update \u0026amp;\u0026amp; upgrade Ensure you will install the most recent Ansible version: apt-add-repository \u0026ndash;yes \u0026ndash;update ppa:ansible/ansible Install the following packages: apt install python python-pip ansible unzip sshpass libffi-dev libssl-dev Install PyWinRM using: pip install pywinrm Install Terraform and Packer by downloading the 64-bit Linux binaries and moving them to /usr/local/bin Install VMWare OVF tool by downloading 64-bit Linux binary from my.vmware.com and running it with \u0026ldquo;\u0026ndash;eulas-agreed\u0026rdquo; option Download the Linux binary for the Terraform ESXi Provider from https://github.com/josenk/terraform-provider-esxi/releases and move it to /usr/local/bin From \u0026ldquo;DetectionLab/ESXi/ansible\u0026rdquo; directory, run: \u0026ldquo;ansible \u0026ndash;version\u0026rdquo; and ensure that the config file used is \u0026ldquo;DetectionLab/ESXi/ansible/ansible.cfg\u0026rdquo;. If not, implement the Ansible \u0026ldquo;world-writtable directory\u0026rdquo; fix by going to running: \u0026ldquo;chmod o-w .\u0026rdquo; from \u0026ldquo;DetectionLab/ESXi/ansible\u0026rdquo; directory.  Future work required  It probably makes sense to abstract all of the logic in logger_bootstrap.sh into individual Ansible tasks There\u0026rsquo;s a lot of areas to make reliability improvements I\u0026rsquo;m guessing there\u0026rsquo;s a way to parallelize some of this execution: https://medium.com/developer-space/parallel-playbook-execution-in-ansible-30799ccda4e0  Debugging / Troubleshooting  If an Ansible playbook fails, you can pick up where it left off with ansible-playbook -v detectionlab.yml --tags=\u0026quot;\u0026lt;hostname\u0026gt;\u0026quot; --start-at-task=\u0026quot;taskname\u0026quot;  Credits As usual, this work is based off the heavy lifting that others have done. My primary sources for this work were:\n Josenk\u0026rsquo;s Terraform-ESXI-Provider - Without this, there would be no way to deploy DL to ESXi without paying for VSphere. Send him/her some love 💌 Automate Windows VM Creation and Configuration in vSphere Using Packer, Terraform and Ansible - Dmitry Teslya Building Virtual Machines with Packer on ESXi 6 - Nick Charlton The DetectionLab work that juju4 has been doing on Azure and Ansible lofi hip hop radio - beats to relax/study to 🔉  Thank you to all of the sponsors who made this possible!\n"
},
{
	"uri": "https://detectionlab.network/deployment/hyperv/",
	"title": "HyperV",
	"tags": [],
	"description": "",
	"content": "Intro This page contains the instruction to build DetectionLab for HyperV. Hyper-V support for DetectionLab is a recent addition and requires more testing to ensure its stability and usability.\nA big thank you to @man715 for adding this in PR #513\nI do not officially support or troubleshoot DetectionLab issues using the HyperV provider. You\u0026rsquo;re welcome to open issues for community support, but I will not personally be able to assist with them.\n Requirements The version of Hyper-V will need to be compatible with Hyper-V VM configuration version 9.0. You will need to be running one of the following operating systems:\n Windows 10 1809 or later Windows Server 2019 Windows Hyper-V Server 2019  For a breakdown of what Operating Systems support which VM configuration versions please visit: (https://docs.microsoft.com/en-us/windows-server/virtualization/hyper-v/deploy/upgrade-virtual-machine-version-in-hyper-v-on-windows-or-windows-server) This build also requires vagrant-reload. If you do not have it installed, you will be prompted to install it.\nKnown Issues Unfortunately, due to some issues with Vagrant and Microsoft, running DetectionLab with Hyper-V is not as easy as it is with other providers. You will need to do the following BEFORE trying to run vagrant up.\n  Patch Vagant Vagrant does not play nice with Windows SMB share authentication. It uses cmdkey which is not properly implemented. More details about the issue can be found in this issue:(https://github.com/hashicorp/vagrant/issues/10661) To patch this, go find the mount_shared_folder.rb file and replace \u0026quot;cmdkey /add:#{options[:smb_host]} /user:#{options[:smb_username]} /pass:\\\u0026quot;#{options[:smb_password]}\\\u0026quot;\u0026quot; with \u0026quot;cmdkey '/add:\\\u0026quot;#{options[:smb_host]}\\\u0026quot;' '/user:\\\u0026quot;#{options[:smb_username]}\\\u0026quot;' '/pass:\\\u0026quot;#{options[:smb_password]}\\\u0026quot;'\u0026quot;\n  Windows will require you to enter an administrator username and password to be able to create and mount the SMB share. This means the build will not be fully automated. One thing you can do is add config.vm.synced_folder '../Vagrant', '/vagrant', smb_username: \u0026quot;username\u0026quot;, smb_password: \u0026quot;password\u0026quot; to the Vagrantfile on line 2. For security reasons, this is not a good idea as you will be storing your username and password in plaintext. By not having this line added to the Vagrantfile you will be required to put in your username and password at least 2 times per machine.\n  Selecting Virtual Switch During the build you will also have to select the virtual switch you want to use for each server. This cannot be avoided. There is a option that can be used to force the network adapter to use a particular switch; however, using that option breaks this build process.\n  A really hacky workaround is, if you are using the smb_username and smb_password options, would be to press the option number corresponding with the virtual switch you want to use then enter four times after vagrant up. So, if you know you want the virtual switch 1 vagrant up 1 enter 1 enter 1 enter 1 enter\nYes, I know hacky but it works.\nA workaround for logger losing network access/assigned IP or access to any of apps including splunk after a your first shutdown, would be to edit the /etc/netplan/01-netcfg.yaml on logger\u0026rsquo;s machine and remove anything after renderer: networkd. Then reboot the VM.  To check if all your virtual machines have an IP assigned use the following powershell command: Get-VMNetworkAdapter -VMName *. See Issue #525 for more detail.\nHow this build works The majority of this build works the same as the VirtualBox build. The most notable difference is on the Windows builds. There is a script that will create an internal virtual switch called \u0026ldquo;NATSwitch.\u0026rdquo; Throughout the build process, a script will create a second network adapter and attach it to the NATSwitch on the VM being built. After the machine is built the original network adapter will be removed from the VM.\nNote This build will run two scripts on the host machine. It is advisable to always check any scripts that will be run on your machine before running them.\n"
},
{
	"uri": "https://detectionlab.network/deployment/libvirt/",
	"title": "LibVirt",
	"tags": [],
	"description": "",
	"content": "Intro This page contains the instruction to build DetectionLab for Qemu/LibVirt. This is the provider for you if:\n You are familiar with LibVirt, virt-manager and Qemu and prefer this software stack instead of VirtualBox You are willing to spend a bit more time thinkering with the build process as it is more hands-on than the official DetectionLab build process  A step-by-step guide is available at https://selorasec.wordpress.com/2019/12/03/ad-in-a-box-for-pocs-and-iocs-on-the-cheap-detectionlab-on-libvirt/#Setting_Up_Vagrant.\nA big thank you to @Selora for adding this in PR #254\nI do not officially support or troubleshoot DetectionLab issues using the LibVirt provider. You\u0026rsquo;re welcome to open issues for community support, but I will not personally be able to assist with them.\n Prerequisites LibVirt The libvirt and virt-manager installation walkthrough and documentation is out of scope of this project. To follow along, you need an already working installation of libvirt, virt-manager, and QEMU+kvm.\nPacker  The Virtio drivers ISO needs to be location in the DetectionLab/Packer directory.   This is a direct link to the latest version of the virtio drivers ISO. There\u0026rsquo;s also a \u0026ldquo;stable\u0026rdquo; version available here.  Edit the windows_X.json files in the Packer folder   Make sure the following user-defined variables are pointing to the right thing: virtio_win_iso : The ISO containing the lastest VirtIO drivers packer_build_dir : Where to output the QCOW2 images. It\u0026rsquo;s a temporary directory, the .box files will still be in DetectionLab/Packer  Build the images  env TMPDIR=/path/to/large/storage/ PACKER_LOG=1 PACKER_LOG_PATH=\u0026quot;packer_build.log\u0026quot; packer build --only=qemu windows_2016.json env TMPDIR=/path/to/large/storage/ PACKER_LOG=1 PACKER_LOG_PATH=\u0026quot;packer_build.log\u0026quot; packer build --only=qemu windows_10.json Vagrant  Install the necessary plugins:   vagrant plugin install vagrant-reload vagrant-libvirt vagrant-winrm-syncedfolders See the guide for Ubuntu as the vagrant packages comes with a ton on unofficial \u0026amp; outdated plugins that will cause problems.  Add the previously built windows .box files   vagrant box add windows_10_libvirt.box --name windows_10_libvirt vagrant box add windows_2016_libvirt.box --name windows_2016_libvirt  Build: vagrant up --provider libvirt --no-parallel --provision  Notes: The libvirt builder is highly experimental. This sections describes the trade-offs and the differences between the vanilla DetectionLab.\n The boxes will have two network adapters The vagrant-libvirt provider works by binding to a \u0026ldquo;management\u0026rdquo; network adapter IP addresses. The way vagrant finds the VM\u0026rsquo;s IP address is by probing the dnsmasq lease file of libvirt\u0026rsquo;s host. There\u0026rsquo;s probably a better way, but this is the best I could do that just works (tm) so far. Here\u0026rsquo;s what the configuration looks like:   Management Network: Isolated network, no NAT, no internet access, with DHCP. Detectionlab Network: 192.168.38.0/24, with NAT, with internet access, with DHCP.    The synced folder is using an old, slow and buggy plugin. While this barely works, it\u0026rsquo;s enough to push the provisioning scripts to the Windows instances. Any modifications to the vm.synced_folder in the VagrantFile libvirt provider will likely break the provisionning process\n  The graphical and input settings assume the use of virt-manager with the SPICE viewer on Windows and the VNC viewer on Linux (logger). The spice agent for copy/pasting and other quality of life improvement, like auto-resolution changes is NOT installed on the Windows hosts. Guacamole is a better way to access your VMs.\n  "
},
{
	"uri": "https://detectionlab.network/deployment/troubleshooting/",
	"title": "Troubleshooting &amp; Known Issues",
	"tags": [],
	"description": "",
	"content": "An unfortunate result of maintaining a project with so many moving parts is that it\u0026rsquo;s prone to have issues. Although I do my best to keep everything working and run automated build tests once per week, sometimes issues slip through the cracks.\nBe sure to check the GitHub issues page for solved issues related to your problem: https://github.com/clong/DetectionLab/issues\nHere are some strategies for resolving common problems:\n Issue: You run into an error while provisioning a host\nSolution: Each problem is different. Take a look at the error text and see if you can determine what the exact problem is based on the error message. Often times, running vagrant reload \u0026lt;hostname\u0026gt; --provision is enough to get things back on track. That command will simply restart the VM and start provisioning over again. If that doesn\u0026rsquo;t work, try destroying the host via vagrant destroy \u0026lt;hostname\u0026gt; and then re-creating it using vagrant up \u0026lt;hostname\u0026gt;. If you continue to run into the same error, search DetectionLab issues. Finally, if you can\u0026rsquo;t find a solution to your problem, please open a new issue!\n Issue: You get stuck and want to start fresh\nSolution: Navigate to DetectionLab/Vagrant and run vagrant destroy -f to force destroy all VMs. Afterwards, delete the .vagrant hidden folder inside of DetectionLab/Vagrant to ensure the VMs and their metadata have been properly removed. Optionally, delete and re-clone the entire DetectionLab git repo after those steps have been completed.\n Issue: When RDP\u0026rsquo;ing to one of the Windows hosts, you see the following error message:\n An authentication error has occurred. The function requested is not supported. This could be due to CredSSP encryption oracle remediation\n Workarounds:\nFrom the host you are RDP\u0026rsquo;ing from, run gpedit.msc, and then browse to Computer Configuration \u0026gt; Administrative Templates \u0026gt; System \u0026gt; Credentials Delegation in the navigation pane. Change the Encryption Oracle Remediation policy to Enabled, and then change Protection Level to Vulnerable.\nSee this issue for more detail: https://github.com/clong/DetectionLab/issues/478\n Issue: Splunk says \u0026ldquo;Your Splunk license has expired or you have exceeded your license too many times\u0026rdquo;\nWorkarounds:\n Make some modifications to ingest less data Sign up for a free Splunk dev license which gives you 10GB/day ingest: https://dev.splunk.com/enterprise/dev_license/ and apply that license Simply re-provision the logger host (no need to re-provision the windows hosts - they\u0026rsquo;ll automatically reconnect):  vagrant destroy -f logger; vagrant up logger     Issue: Vagrant reports: Message: HTTPClient::KeepAliveDisconnected: while provisioning. Workaround: Run $ vagrant reload \u0026lt;hostname\u0026gt; --provision\n Issue: Vagrant timed out while attempting to connect via WinRM after Win10 host joins the domain. Workaround Documented in #21. Just run $ vagrant reload win10 --provision\n Issue: Vagrant is unable to forward a port for you.\nWorkaround: Documented in #11. There are a few possibilities:\n Try a vagrant reload \u0026lt;hostname\u0026gt; --provision. For whatever reason vagrant up doesn\u0026rsquo;t fix conflicts but reload does. Check if something is legitimately occupying the port via sudo lsof -n -iTCP:\u0026lt;port_number\u0026gt; Follow the instructions from this comment: https://github.com/hashicorp/vagrant/issues/8130#issuecomment-272963103   Issue: Your primary hard drive doesn\u0026rsquo;t have enough space for DetectionLab.\nWorkaround: Documented in #48. You can change the default location for Vagrant by using the VAGRANT_HOME environment variable.\n Issue: You\u0026rsquo;re having problems running Virtualbox while Hyper-V or CredentialGuard are enabled\nWorkaround: This is not a supported configuration. See https://stackoverflow.com/questions/37955942/vagrant-up-vboxmanage-exe-error-vt-x-is-not-available-verr-vmx-no-vmx-code and https://github.com/clong/DetectionLab/issues/433\n Issue: You see an error message like VBoxManage: error: Unknown option: --clipboard\nWorkaround: This should be fixed in Virtualbox 6.1.4, but please see this issue for details on how to fix this.\n"
},
{
	"uri": "https://detectionlab.network/",
	"title": "DetectionLab",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://detectionlab.network/usage/atomicredteam/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Coming soon\n"
},
{
	"uri": "https://detectionlab.network/usage/autorunstowineventlog/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Coming soon\n"
},
{
	"uri": "https://detectionlab.network/usage/badblood/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Coming soon\n"
},
{
	"uri": "https://detectionlab.network/usage/mimikatz/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Coming soon\n"
},
{
	"uri": "https://detectionlab.network/usage/splunk/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Coming soon\n"
},
{
	"uri": "https://detectionlab.network/usage/sysmon/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Coming soon\n"
},
{
	"uri": "https://detectionlab.network/usage/velociraptor/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Coming soon\n"
},
{
	"uri": "https://detectionlab.network/usage/zeek/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Coming soon\n"
},
{
	"uri": "https://detectionlab.network/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://detectionlab.network/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]